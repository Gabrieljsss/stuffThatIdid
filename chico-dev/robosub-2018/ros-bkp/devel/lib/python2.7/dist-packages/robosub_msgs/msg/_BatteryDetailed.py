# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robosub_msgs/BatteryDetailed.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class BatteryDetailed(genpy.Message):
  _md5sum = "660dcb625a059d01e1ff63016976fc49"
  _type = "robosub_msgs/BatteryDetailed"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# A more detailed message for battery state

# Power status consts
uint8 POWER_SUPPLY_STATUS_UNKNOWN      = 0
uint8 POWER_SUPPLY_STATUS_CHARGING     = 1
uint8 POWER_SUPPLY_STATUS_DISCHARGING  = 2
uint8 POWER_SUPPLY_STATUS_NOT_CHARGING = 3
uint8 POWER_SUPPLY_STATUS_FULL         = 4
uint8 POWER_SUPPLY_STATUS_OVERLOAD     = 5
uint8 POWER_SUPPLY_STATUS_ON_LINE      = 6
uint8 POWER_SUPPLY_STATUS_ON_BATTERY   = 7
uint8 POWER_SUPPLY_STATUS_LOW_BATTERY  = 8
uint8 POWER_SUPPLY_STATUS_HIGH_BATTERY = 9
uint8 POWER_SUPPLY_STATUS_REPLACE      = 10

# Message Variables
bool      alive          # Is the battery attached?
int32[]   status         # Space Seperated Information
float32   voltageBattery # Voltage of the Battery
float32   currentBattery # Current out of the Battery
float32   voltageInput   # Voltage of the Input
float32   currentInput   # Current of the Input
float32   voltageOutput  # Voltage of the Output
float32   currentOutput  # Current of the Output
float32   temperature    # Temperature Reading near the Battery
float32   charge         # Percent charged
float32   capacity       # Ah left in the battery
time      runtime        # Time left on the battery
float32[] cellVoltages   # Voltages of individual cells (if available)
"""
  # Pseudo-constants
  POWER_SUPPLY_STATUS_UNKNOWN = 0
  POWER_SUPPLY_STATUS_CHARGING = 1
  POWER_SUPPLY_STATUS_DISCHARGING = 2
  POWER_SUPPLY_STATUS_NOT_CHARGING = 3
  POWER_SUPPLY_STATUS_FULL = 4
  POWER_SUPPLY_STATUS_OVERLOAD = 5
  POWER_SUPPLY_STATUS_ON_LINE = 6
  POWER_SUPPLY_STATUS_ON_BATTERY = 7
  POWER_SUPPLY_STATUS_LOW_BATTERY = 8
  POWER_SUPPLY_STATUS_HIGH_BATTERY = 9
  POWER_SUPPLY_STATUS_REPLACE = 10

  __slots__ = ['alive','status','voltageBattery','currentBattery','voltageInput','currentInput','voltageOutput','currentOutput','temperature','charge','capacity','runtime','cellVoltages']
  _slot_types = ['bool','int32[]','float32','float32','float32','float32','float32','float32','float32','float32','float32','time','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       alive,status,voltageBattery,currentBattery,voltageInput,currentInput,voltageOutput,currentOutput,temperature,charge,capacity,runtime,cellVoltages

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BatteryDetailed, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.alive is None:
        self.alive = False
      if self.status is None:
        self.status = []
      if self.voltageBattery is None:
        self.voltageBattery = 0.
      if self.currentBattery is None:
        self.currentBattery = 0.
      if self.voltageInput is None:
        self.voltageInput = 0.
      if self.currentInput is None:
        self.currentInput = 0.
      if self.voltageOutput is None:
        self.voltageOutput = 0.
      if self.currentOutput is None:
        self.currentOutput = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.charge is None:
        self.charge = 0.
      if self.capacity is None:
        self.capacity = 0.
      if self.runtime is None:
        self.runtime = genpy.Time()
      if self.cellVoltages is None:
        self.cellVoltages = []
    else:
      self.alive = False
      self.status = []
      self.voltageBattery = 0.
      self.currentBattery = 0.
      self.voltageInput = 0.
      self.currentInput = 0.
      self.voltageOutput = 0.
      self.currentOutput = 0.
      self.temperature = 0.
      self.charge = 0.
      self.capacity = 0.
      self.runtime = genpy.Time()
      self.cellVoltages = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.alive))
      length = len(self.status)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.status))
      _x = self
      buff.write(_get_struct_9f2I().pack(_x.voltageBattery, _x.currentBattery, _x.voltageInput, _x.currentInput, _x.voltageOutput, _x.currentOutput, _x.temperature, _x.charge, _x.capacity, _x.runtime.secs, _x.runtime.nsecs))
      length = len(self.cellVoltages)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.cellVoltages))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.runtime is None:
        self.runtime = genpy.Time()
      end = 0
      start = end
      end += 1
      (self.alive,) = _get_struct_B().unpack(str[start:end])
      self.alive = bool(self.alive)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.status = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 44
      (_x.voltageBattery, _x.currentBattery, _x.voltageInput, _x.currentInput, _x.voltageOutput, _x.currentOutput, _x.temperature, _x.charge, _x.capacity, _x.runtime.secs, _x.runtime.nsecs,) = _get_struct_9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cellVoltages = struct.unpack(pattern, str[start:end])
      self.runtime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.alive))
      length = len(self.status)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.status.tostring())
      _x = self
      buff.write(_get_struct_9f2I().pack(_x.voltageBattery, _x.currentBattery, _x.voltageInput, _x.currentInput, _x.voltageOutput, _x.currentOutput, _x.temperature, _x.charge, _x.capacity, _x.runtime.secs, _x.runtime.nsecs))
      length = len(self.cellVoltages)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cellVoltages.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.runtime is None:
        self.runtime = genpy.Time()
      end = 0
      start = end
      end += 1
      (self.alive,) = _get_struct_B().unpack(str[start:end])
      self.alive = bool(self.alive)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.status = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 44
      (_x.voltageBattery, _x.currentBattery, _x.voltageInput, _x.currentInput, _x.voltageOutput, _x.currentOutput, _x.temperature, _x.charge, _x.capacity, _x.runtime.secs, _x.runtime.nsecs,) = _get_struct_9f2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cellVoltages = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      self.runtime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f2I = None
def _get_struct_9f2I():
    global _struct_9f2I
    if _struct_9f2I is None:
        _struct_9f2I = struct.Struct("<9f2I")
    return _struct_9f2I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
