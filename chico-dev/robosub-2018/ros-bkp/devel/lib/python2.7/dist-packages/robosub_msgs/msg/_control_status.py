# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robosub_msgs/control_status.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control_status(genpy.Message):
  _md5sum = "ba9199cfb44b57689d466247199aa83f"
  _type = "robosub_msgs/control_status"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string forward_state
string strafe_left_state
string dive_state
string roll_right_state
string pitch_down_state
string yaw_left_state

float32 forward_goal
float32 strafe_left_goal
float32 dive_goal
float32 roll_right_goal
float32 pitch_down_goal
float32 yaw_left_goal

float32 forward_error
float32 strafe_left_error
float32 dive_error
float32 roll_right_error
float32 pitch_down_error
float32 yaw_left_error

float32 forward_integral
float32 strafe_left_integral
float32 dive_integral
float32 roll_right_integral
float32 pitch_down_integral
float32 yaw_left_integral

float32 forward_derivative
float32 strafe_left_derivative
float32 dive_derivative
float32 roll_right_derivative
float32 pitch_down_derivative
float32 yaw_left_derivative

float32[] translation_control
float32[] rotation_control
"""
  __slots__ = ['forward_state','strafe_left_state','dive_state','roll_right_state','pitch_down_state','yaw_left_state','forward_goal','strafe_left_goal','dive_goal','roll_right_goal','pitch_down_goal','yaw_left_goal','forward_error','strafe_left_error','dive_error','roll_right_error','pitch_down_error','yaw_left_error','forward_integral','strafe_left_integral','dive_integral','roll_right_integral','pitch_down_integral','yaw_left_integral','forward_derivative','strafe_left_derivative','dive_derivative','roll_right_derivative','pitch_down_derivative','yaw_left_derivative','translation_control','rotation_control']
  _slot_types = ['string','string','string','string','string','string','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       forward_state,strafe_left_state,dive_state,roll_right_state,pitch_down_state,yaw_left_state,forward_goal,strafe_left_goal,dive_goal,roll_right_goal,pitch_down_goal,yaw_left_goal,forward_error,strafe_left_error,dive_error,roll_right_error,pitch_down_error,yaw_left_error,forward_integral,strafe_left_integral,dive_integral,roll_right_integral,pitch_down_integral,yaw_left_integral,forward_derivative,strafe_left_derivative,dive_derivative,roll_right_derivative,pitch_down_derivative,yaw_left_derivative,translation_control,rotation_control

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control_status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.forward_state is None:
        self.forward_state = ''
      if self.strafe_left_state is None:
        self.strafe_left_state = ''
      if self.dive_state is None:
        self.dive_state = ''
      if self.roll_right_state is None:
        self.roll_right_state = ''
      if self.pitch_down_state is None:
        self.pitch_down_state = ''
      if self.yaw_left_state is None:
        self.yaw_left_state = ''
      if self.forward_goal is None:
        self.forward_goal = 0.
      if self.strafe_left_goal is None:
        self.strafe_left_goal = 0.
      if self.dive_goal is None:
        self.dive_goal = 0.
      if self.roll_right_goal is None:
        self.roll_right_goal = 0.
      if self.pitch_down_goal is None:
        self.pitch_down_goal = 0.
      if self.yaw_left_goal is None:
        self.yaw_left_goal = 0.
      if self.forward_error is None:
        self.forward_error = 0.
      if self.strafe_left_error is None:
        self.strafe_left_error = 0.
      if self.dive_error is None:
        self.dive_error = 0.
      if self.roll_right_error is None:
        self.roll_right_error = 0.
      if self.pitch_down_error is None:
        self.pitch_down_error = 0.
      if self.yaw_left_error is None:
        self.yaw_left_error = 0.
      if self.forward_integral is None:
        self.forward_integral = 0.
      if self.strafe_left_integral is None:
        self.strafe_left_integral = 0.
      if self.dive_integral is None:
        self.dive_integral = 0.
      if self.roll_right_integral is None:
        self.roll_right_integral = 0.
      if self.pitch_down_integral is None:
        self.pitch_down_integral = 0.
      if self.yaw_left_integral is None:
        self.yaw_left_integral = 0.
      if self.forward_derivative is None:
        self.forward_derivative = 0.
      if self.strafe_left_derivative is None:
        self.strafe_left_derivative = 0.
      if self.dive_derivative is None:
        self.dive_derivative = 0.
      if self.roll_right_derivative is None:
        self.roll_right_derivative = 0.
      if self.pitch_down_derivative is None:
        self.pitch_down_derivative = 0.
      if self.yaw_left_derivative is None:
        self.yaw_left_derivative = 0.
      if self.translation_control is None:
        self.translation_control = []
      if self.rotation_control is None:
        self.rotation_control = []
    else:
      self.forward_state = ''
      self.strafe_left_state = ''
      self.dive_state = ''
      self.roll_right_state = ''
      self.pitch_down_state = ''
      self.yaw_left_state = ''
      self.forward_goal = 0.
      self.strafe_left_goal = 0.
      self.dive_goal = 0.
      self.roll_right_goal = 0.
      self.pitch_down_goal = 0.
      self.yaw_left_goal = 0.
      self.forward_error = 0.
      self.strafe_left_error = 0.
      self.dive_error = 0.
      self.roll_right_error = 0.
      self.pitch_down_error = 0.
      self.yaw_left_error = 0.
      self.forward_integral = 0.
      self.strafe_left_integral = 0.
      self.dive_integral = 0.
      self.roll_right_integral = 0.
      self.pitch_down_integral = 0.
      self.yaw_left_integral = 0.
      self.forward_derivative = 0.
      self.strafe_left_derivative = 0.
      self.dive_derivative = 0.
      self.roll_right_derivative = 0.
      self.pitch_down_derivative = 0.
      self.yaw_left_derivative = 0.
      self.translation_control = []
      self.rotation_control = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.forward_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.strafe_left_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.dive_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.roll_right_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pitch_down_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.yaw_left_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_24f().pack(_x.forward_goal, _x.strafe_left_goal, _x.dive_goal, _x.roll_right_goal, _x.pitch_down_goal, _x.yaw_left_goal, _x.forward_error, _x.strafe_left_error, _x.dive_error, _x.roll_right_error, _x.pitch_down_error, _x.yaw_left_error, _x.forward_integral, _x.strafe_left_integral, _x.dive_integral, _x.roll_right_integral, _x.pitch_down_integral, _x.yaw_left_integral, _x.forward_derivative, _x.strafe_left_derivative, _x.dive_derivative, _x.roll_right_derivative, _x.pitch_down_derivative, _x.yaw_left_derivative))
      length = len(self.translation_control)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.translation_control))
      length = len(self.rotation_control)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.rotation_control))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.forward_state = str[start:end].decode('utf-8')
      else:
        self.forward_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.strafe_left_state = str[start:end].decode('utf-8')
      else:
        self.strafe_left_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dive_state = str[start:end].decode('utf-8')
      else:
        self.dive_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.roll_right_state = str[start:end].decode('utf-8')
      else:
        self.roll_right_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pitch_down_state = str[start:end].decode('utf-8')
      else:
        self.pitch_down_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.yaw_left_state = str[start:end].decode('utf-8')
      else:
        self.yaw_left_state = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.forward_goal, _x.strafe_left_goal, _x.dive_goal, _x.roll_right_goal, _x.pitch_down_goal, _x.yaw_left_goal, _x.forward_error, _x.strafe_left_error, _x.dive_error, _x.roll_right_error, _x.pitch_down_error, _x.yaw_left_error, _x.forward_integral, _x.strafe_left_integral, _x.dive_integral, _x.roll_right_integral, _x.pitch_down_integral, _x.yaw_left_integral, _x.forward_derivative, _x.strafe_left_derivative, _x.dive_derivative, _x.roll_right_derivative, _x.pitch_down_derivative, _x.yaw_left_derivative,) = _get_struct_24f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.translation_control = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rotation_control = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.forward_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.strafe_left_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.dive_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.roll_right_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pitch_down_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.yaw_left_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_24f().pack(_x.forward_goal, _x.strafe_left_goal, _x.dive_goal, _x.roll_right_goal, _x.pitch_down_goal, _x.yaw_left_goal, _x.forward_error, _x.strafe_left_error, _x.dive_error, _x.roll_right_error, _x.pitch_down_error, _x.yaw_left_error, _x.forward_integral, _x.strafe_left_integral, _x.dive_integral, _x.roll_right_integral, _x.pitch_down_integral, _x.yaw_left_integral, _x.forward_derivative, _x.strafe_left_derivative, _x.dive_derivative, _x.roll_right_derivative, _x.pitch_down_derivative, _x.yaw_left_derivative))
      length = len(self.translation_control)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.translation_control.tostring())
      length = len(self.rotation_control)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.rotation_control.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.forward_state = str[start:end].decode('utf-8')
      else:
        self.forward_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.strafe_left_state = str[start:end].decode('utf-8')
      else:
        self.strafe_left_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dive_state = str[start:end].decode('utf-8')
      else:
        self.dive_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.roll_right_state = str[start:end].decode('utf-8')
      else:
        self.roll_right_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pitch_down_state = str[start:end].decode('utf-8')
      else:
        self.pitch_down_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.yaw_left_state = str[start:end].decode('utf-8')
      else:
        self.yaw_left_state = str[start:end]
      _x = self
      start = end
      end += 96
      (_x.forward_goal, _x.strafe_left_goal, _x.dive_goal, _x.roll_right_goal, _x.pitch_down_goal, _x.yaw_left_goal, _x.forward_error, _x.strafe_left_error, _x.dive_error, _x.roll_right_error, _x.pitch_down_error, _x.yaw_left_error, _x.forward_integral, _x.strafe_left_integral, _x.dive_integral, _x.roll_right_integral, _x.pitch_down_integral, _x.yaw_left_integral, _x.forward_derivative, _x.strafe_left_derivative, _x.dive_derivative, _x.roll_right_derivative, _x.pitch_down_derivative, _x.yaw_left_derivative,) = _get_struct_24f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.translation_control = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.rotation_control = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_24f = None
def _get_struct_24f():
    global _struct_24f
    if _struct_24f is None:
        _struct_24f = struct.Struct("<24f")
    return _struct_24f
