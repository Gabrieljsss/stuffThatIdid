# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robosub_msgs/gamepad.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gamepad(genpy.Message):
  _md5sum = "cf892f259742829382c57ac0ab7dbed8"
  _type = "robosub_msgs/gamepad"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 axisX
float64 axisY
float64 axisZ

float64 axisRX
float64 axisRY
float64 axisRZ

int32 hatX
int32 hatY

bool[19] buttons

uint8 type

#enum for type
uint8 XBOX = 0
uint8 PS3  = 1
"""
  # Pseudo-constants
  XBOX = 0
  PS3 = 1

  __slots__ = ['axisX','axisY','axisZ','axisRX','axisRY','axisRZ','hatX','hatY','buttons','type']
  _slot_types = ['float64','float64','float64','float64','float64','float64','int32','int32','bool[19]','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       axisX,axisY,axisZ,axisRX,axisRY,axisRZ,hatX,hatY,buttons,type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gamepad, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.axisX is None:
        self.axisX = 0.
      if self.axisY is None:
        self.axisY = 0.
      if self.axisZ is None:
        self.axisZ = 0.
      if self.axisRX is None:
        self.axisRX = 0.
      if self.axisRY is None:
        self.axisRY = 0.
      if self.axisRZ is None:
        self.axisRZ = 0.
      if self.hatX is None:
        self.hatX = 0
      if self.hatY is None:
        self.hatY = 0
      if self.buttons is None:
        self.buttons = [False] * 19
      if self.type is None:
        self.type = 0
    else:
      self.axisX = 0.
      self.axisY = 0.
      self.axisZ = 0.
      self.axisRX = 0.
      self.axisRY = 0.
      self.axisRZ = 0.
      self.hatX = 0
      self.hatY = 0
      self.buttons = [False] * 19
      self.type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d2i().pack(_x.axisX, _x.axisY, _x.axisZ, _x.axisRX, _x.axisRY, _x.axisRZ, _x.hatX, _x.hatY))
      buff.write(_get_struct_19B().pack(*self.buttons))
      buff.write(_get_struct_B().pack(self.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.axisX, _x.axisY, _x.axisZ, _x.axisRX, _x.axisRY, _x.axisRZ, _x.hatX, _x.hatY,) = _get_struct_6d2i().unpack(str[start:end])
      start = end
      end += 19
      self.buttons = _get_struct_19B().unpack(str[start:end])
      self.buttons = map(bool, self.buttons)
      start = end
      end += 1
      (self.type,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d2i().pack(_x.axisX, _x.axisY, _x.axisZ, _x.axisRX, _x.axisRY, _x.axisRZ, _x.hatX, _x.hatY))
      buff.write(self.buttons.tostring())
      buff.write(_get_struct_B().pack(self.type))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.axisX, _x.axisY, _x.axisZ, _x.axisRX, _x.axisRY, _x.axisRZ, _x.hatX, _x.hatY,) = _get_struct_6d2i().unpack(str[start:end])
      start = end
      end += 19
      self.buttons = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=19)
      self.buttons = map(bool, self.buttons)
      start = end
      end += 1
      (self.type,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_6d2i = None
def _get_struct_6d2i():
    global _struct_6d2i
    if _struct_6d2i is None:
        _struct_6d2i = struct.Struct("<6d2i")
    return _struct_6d2i
_struct_19B = None
def _get_struct_19B():
    global _struct_19B
    if _struct_19B is None:
        _struct_19B = struct.Struct("<19B")
    return _struct_19B
