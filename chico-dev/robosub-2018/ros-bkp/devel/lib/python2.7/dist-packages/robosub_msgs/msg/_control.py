# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robosub_msgs/control.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control(genpy.Message):
  _md5sum = "c5b125a0ddb310a20ebfcb0d3673cf3c"
  _type = "robosub_msgs/control"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Description
#
# This message type is used for for updating the control system goals and
# displaying the current goals of the control system.  The control system has 6
# possible goals. Forward, strafe, and dive are position goals, while roll,
# pitch, and yaw are orientation goals. The control system internally has
# variables that store its current goals. Sending a message of this type will
# update those internal goals.

# When adjusting these goals, one must fill out the associated "state" variable
# for that goal, which determines how the goal is changed.
#   STATE_NONE means the control system will not update this particular goal.
#   STATE_ABSOLUTE means the control system will set its internal goal to be
#       the new value.
#   STATE_RELATIVE means the control system will set its internal goal to be
#       the current state plus the new value (i.e. if the current roll is 15
#       degrees and we send a relative goal of 10 degrees, the control system's
#       new goal will be 25 degrees).
#   STATE_ERROR means the control system will not use feedback, this allows us
#       to directly control the error signal going into the PID. Generally,
#       don't use this state if you didn't understand the previous sentence.


# When moving forward/backward or strafing, we cannot use absolute or relative
# goals, we must always use STATE_ERROR. This is because we currently do not
# know where the sub is in the pool, therefore the control system cannot use
# feedback to control x,y position in the pool.

# When the control system is publishing its current state, it will always be
# either STATE_ABSOLUTE or STATE_ERROR. Recall that the other two states are
# just used when updating the control system's internal state.

# Examples:
# To set the sub to be at 1 meter depth:
#   forward_state, strafe_state, roll_state, pitch_state, yaw_state=STATE_NONE
#   dive_state = STATE_ABSOLUTE
#   dive = -1
# To set the sub to be 1 meter deeper than its current depth:
#   forward_state, strafe_state, roll_state, pitch_state, yaw_state=STATE_NONE
#   dive_state = STATE_RELATIVE
#   dive = -1
# To make the sub move forward:
#   dive_state, strafe_state, roll_state, pitch_state, yaw_state = STATE_NONE
#   forward_state = STATE_ERROR
#   forward = 1 (larger/smaller numbers will make sub move faster/slower)


#control states
uint8 forward_state
uint8 strafe_state
uint8 dive_state
uint8 roll_state
uint8 pitch_state
uint8 yaw_state

#control commands
float64 forward
float64 strafe_left
float64 dive
float64 roll_right
float64 pitch_down
float64 yaw_left


#Enums for state variables
uint8 STATE_NONE     = 0
uint8 STATE_ABSOLUTE = 1
uint8 STATE_RELATIVE = 2
uint8 STATE_ERROR    = 3


"""
  # Pseudo-constants
  STATE_NONE = 0
  STATE_ABSOLUTE = 1
  STATE_RELATIVE = 2
  STATE_ERROR = 3

  __slots__ = ['forward_state','strafe_state','dive_state','roll_state','pitch_state','yaw_state','forward','strafe_left','dive','roll_right','pitch_down','yaw_left']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       forward_state,strafe_state,dive_state,roll_state,pitch_state,yaw_state,forward,strafe_left,dive,roll_right,pitch_down,yaw_left

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.forward_state is None:
        self.forward_state = 0
      if self.strafe_state is None:
        self.strafe_state = 0
      if self.dive_state is None:
        self.dive_state = 0
      if self.roll_state is None:
        self.roll_state = 0
      if self.pitch_state is None:
        self.pitch_state = 0
      if self.yaw_state is None:
        self.yaw_state = 0
      if self.forward is None:
        self.forward = 0.
      if self.strafe_left is None:
        self.strafe_left = 0.
      if self.dive is None:
        self.dive = 0.
      if self.roll_right is None:
        self.roll_right = 0.
      if self.pitch_down is None:
        self.pitch_down = 0.
      if self.yaw_left is None:
        self.yaw_left = 0.
    else:
      self.forward_state = 0
      self.strafe_state = 0
      self.dive_state = 0
      self.roll_state = 0
      self.pitch_state = 0
      self.yaw_state = 0
      self.forward = 0.
      self.strafe_left = 0.
      self.dive = 0.
      self.roll_right = 0.
      self.pitch_down = 0.
      self.yaw_left = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B6d().pack(_x.forward_state, _x.strafe_state, _x.dive_state, _x.roll_state, _x.pitch_state, _x.yaw_state, _x.forward, _x.strafe_left, _x.dive, _x.roll_right, _x.pitch_down, _x.yaw_left))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 54
      (_x.forward_state, _x.strafe_state, _x.dive_state, _x.roll_state, _x.pitch_state, _x.yaw_state, _x.forward, _x.strafe_left, _x.dive, _x.roll_right, _x.pitch_down, _x.yaw_left,) = _get_struct_6B6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B6d().pack(_x.forward_state, _x.strafe_state, _x.dive_state, _x.roll_state, _x.pitch_state, _x.yaw_state, _x.forward, _x.strafe_left, _x.dive, _x.roll_right, _x.pitch_down, _x.yaw_left))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 54
      (_x.forward_state, _x.strafe_state, _x.dive_state, _x.roll_state, _x.pitch_state, _x.yaw_state, _x.forward, _x.strafe_left, _x.dive, _x.roll_right, _x.pitch_down, _x.yaw_left,) = _get_struct_6B6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B6d = None
def _get_struct_6B6d():
    global _struct_6B6d
    if _struct_6B6d is None:
        _struct_6B6d = struct.Struct("<6B6d")
    return _struct_6B6d
