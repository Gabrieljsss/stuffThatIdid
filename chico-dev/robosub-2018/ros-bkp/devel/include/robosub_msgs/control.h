// Generated by gencpp from file robosub_msgs/control.msg
// DO NOT EDIT!


#ifndef ROBOSUB_MSGS_MESSAGE_CONTROL_H
#define ROBOSUB_MSGS_MESSAGE_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robosub_msgs
{
template <class ContainerAllocator>
struct control_
{
  typedef control_<ContainerAllocator> Type;

  control_()
    : forward_state(0)
    , strafe_state(0)
    , dive_state(0)
    , roll_state(0)
    , pitch_state(0)
    , yaw_state(0)
    , forward(0.0)
    , strafe_left(0.0)
    , dive(0.0)
    , roll_right(0.0)
    , pitch_down(0.0)
    , yaw_left(0.0)  {
    }
  control_(const ContainerAllocator& _alloc)
    : forward_state(0)
    , strafe_state(0)
    , dive_state(0)
    , roll_state(0)
    , pitch_state(0)
    , yaw_state(0)
    , forward(0.0)
    , strafe_left(0.0)
    , dive(0.0)
    , roll_right(0.0)
    , pitch_down(0.0)
    , yaw_left(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _forward_state_type;
  _forward_state_type forward_state;

   typedef uint8_t _strafe_state_type;
  _strafe_state_type strafe_state;

   typedef uint8_t _dive_state_type;
  _dive_state_type dive_state;

   typedef uint8_t _roll_state_type;
  _roll_state_type roll_state;

   typedef uint8_t _pitch_state_type;
  _pitch_state_type pitch_state;

   typedef uint8_t _yaw_state_type;
  _yaw_state_type yaw_state;

   typedef double _forward_type;
  _forward_type forward;

   typedef double _strafe_left_type;
  _strafe_left_type strafe_left;

   typedef double _dive_type;
  _dive_type dive;

   typedef double _roll_right_type;
  _roll_right_type roll_right;

   typedef double _pitch_down_type;
  _pitch_down_type pitch_down;

   typedef double _yaw_left_type;
  _yaw_left_type yaw_left;



  enum {
    STATE_NONE = 0u,
    STATE_ABSOLUTE = 1u,
    STATE_RELATIVE = 2u,
    STATE_ERROR = 3u,
  };


  typedef boost::shared_ptr< ::robosub_msgs::control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robosub_msgs::control_<ContainerAllocator> const> ConstPtr;

}; // struct control_

typedef ::robosub_msgs::control_<std::allocator<void> > control;

typedef boost::shared_ptr< ::robosub_msgs::control > controlPtr;
typedef boost::shared_ptr< ::robosub_msgs::control const> controlConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robosub_msgs::control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robosub_msgs::control_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robosub_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'robosub_msgs': ['/home/gabrieljsss/ros/src/robosub_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robosub_msgs::control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robosub_msgs::control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robosub_msgs::control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robosub_msgs::control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosub_msgs::control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robosub_msgs::control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robosub_msgs::control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5b125a0ddb310a20ebfcb0d3673cf3c";
  }

  static const char* value(const ::robosub_msgs::control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5b125a0ddb310a2ULL;
  static const uint64_t static_value2 = 0x0ebfcb0d3673cf3cULL;
};

template<class ContainerAllocator>
struct DataType< ::robosub_msgs::control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robosub_msgs/control";
  }

  static const char* value(const ::robosub_msgs::control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robosub_msgs::control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Description\n\
#\n\
# This message type is used for for updating the control system goals and\n\
# displaying the current goals of the control system.  The control system has 6\n\
# possible goals. Forward, strafe, and dive are position goals, while roll,\n\
# pitch, and yaw are orientation goals. The control system internally has\n\
# variables that store its current goals. Sending a message of this type will\n\
# update those internal goals.\n\
\n\
# When adjusting these goals, one must fill out the associated \"state\" variable\n\
# for that goal, which determines how the goal is changed.\n\
#   STATE_NONE means the control system will not update this particular goal.\n\
#   STATE_ABSOLUTE means the control system will set its internal goal to be\n\
#       the new value.\n\
#   STATE_RELATIVE means the control system will set its internal goal to be\n\
#       the current state plus the new value (i.e. if the current roll is 15\n\
#       degrees and we send a relative goal of 10 degrees, the control system's\n\
#       new goal will be 25 degrees).\n\
#   STATE_ERROR means the control system will not use feedback, this allows us\n\
#       to directly control the error signal going into the PID. Generally,\n\
#       don't use this state if you didn't understand the previous sentence.\n\
\n\
\n\
# When moving forward/backward or strafing, we cannot use absolute or relative\n\
# goals, we must always use STATE_ERROR. This is because we currently do not\n\
# know where the sub is in the pool, therefore the control system cannot use\n\
# feedback to control x,y position in the pool.\n\
\n\
# When the control system is publishing its current state, it will always be\n\
# either STATE_ABSOLUTE or STATE_ERROR. Recall that the other two states are\n\
# just used when updating the control system's internal state.\n\
\n\
# Examples:\n\
# To set the sub to be at 1 meter depth:\n\
#   forward_state, strafe_state, roll_state, pitch_state, yaw_state=STATE_NONE\n\
#   dive_state = STATE_ABSOLUTE\n\
#   dive = -1\n\
# To set the sub to be 1 meter deeper than its current depth:\n\
#   forward_state, strafe_state, roll_state, pitch_state, yaw_state=STATE_NONE\n\
#   dive_state = STATE_RELATIVE\n\
#   dive = -1\n\
# To make the sub move forward:\n\
#   dive_state, strafe_state, roll_state, pitch_state, yaw_state = STATE_NONE\n\
#   forward_state = STATE_ERROR\n\
#   forward = 1 (larger/smaller numbers will make sub move faster/slower)\n\
\n\
\n\
#control states\n\
uint8 forward_state\n\
uint8 strafe_state\n\
uint8 dive_state\n\
uint8 roll_state\n\
uint8 pitch_state\n\
uint8 yaw_state\n\
\n\
#control commands\n\
float64 forward\n\
float64 strafe_left\n\
float64 dive\n\
float64 roll_right\n\
float64 pitch_down\n\
float64 yaw_left\n\
\n\
\n\
#Enums for state variables\n\
uint8 STATE_NONE     = 0\n\
uint8 STATE_ABSOLUTE = 1\n\
uint8 STATE_RELATIVE = 2\n\
uint8 STATE_ERROR    = 3\n\
\n\
\n\
";
  }

  static const char* value(const ::robosub_msgs::control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robosub_msgs::control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.forward_state);
      stream.next(m.strafe_state);
      stream.next(m.dive_state);
      stream.next(m.roll_state);
      stream.next(m.pitch_state);
      stream.next(m.yaw_state);
      stream.next(m.forward);
      stream.next(m.strafe_left);
      stream.next(m.dive);
      stream.next(m.roll_right);
      stream.next(m.pitch_down);
      stream.next(m.yaw_left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robosub_msgs::control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robosub_msgs::control_<ContainerAllocator>& v)
  {
    s << indent << "forward_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.forward_state);
    s << indent << "strafe_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.strafe_state);
    s << indent << "dive_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dive_state);
    s << indent << "roll_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roll_state);
    s << indent << "pitch_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pitch_state);
    s << indent << "yaw_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yaw_state);
    s << indent << "forward: ";
    Printer<double>::stream(s, indent + "  ", v.forward);
    s << indent << "strafe_left: ";
    Printer<double>::stream(s, indent + "  ", v.strafe_left);
    s << indent << "dive: ";
    Printer<double>::stream(s, indent + "  ", v.dive);
    s << indent << "roll_right: ";
    Printer<double>::stream(s, indent + "  ", v.roll_right);
    s << indent << "pitch_down: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_down);
    s << indent << "yaw_left: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_left);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSUB_MSGS_MESSAGE_CONTROL_H
